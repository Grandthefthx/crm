from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import CallbackContext
from bot.keyboards import (
    main_menu,
    currency_selection,
    delivery_methods,
    comment_options,
    confirm_buttons,
    get_menu_keyboard
)
from bot.states import *
import logging

logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        reply_markup=get_menu_keyboard()
    )
    await show_main_menu(update)
    return MAIN_MENU

async def handle_text(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∞ Menu)"""
    text = update.message.text
    
    if text.lower() in ['menu', '–º–µ–Ω—é', 'üìã menu']:
        await show_main_menu(update)
        return MAIN_MENU
    
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
        reply_markup=get_menu_keyboard()
    )
    return MAIN_MENU

async def show_main_menu(update: Update):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=main_menu()
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=main_menu()
        )

async def handle_main_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'create_order':
        context.user_data.clear()
        await query.edit_message_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:',
            reply_markup=currency_selection()
        )
        return CURRENCY
    elif query.data == 'view_exchangers':
        return await show_offers(update, context)
    elif query.data == 'my_orders':
        await query.edit_message_text(
            "üìã –†–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞—è–≤–∫–∏' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ])
        )
    elif query.data == 'support':
        await query.edit_message_text(
            "üÜò –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º @support_username",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ])
        )
    elif query.data == 'back_to_menu':
        await show_main_menu(update)
    
    return MAIN_MENU

async def select_currency(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back':
        await show_main_menu(update)
        return MAIN_MENU
        
    context.user_data['currency_from'] = query.data
    await query.edit_message_text(
        f'–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {query.data}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:',
        reply_markup=None
    )
    return AMOUNT

async def get_amount(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã"""
    try:
        amount = float(update.message.text)
        if amount <= 0:
            raise ValueError
            
        context.user_data['amount_from'] = amount
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:',
            reply_markup=delivery_methods()
        )
        return METHOD
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
        return AMOUNT

async def select_method(update: Update, context: CallbackContext) -> int:
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back':
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
            reply_markup=currency_selection()
        )
        return CURRENCY
        
    context.user_data['method'] = query.data
    await query.edit_message_text(
        "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",
        reply_markup=comment_options()
    )
    return COMMENT

async def enter_comment(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back':
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:",
            reply_markup=delivery_methods()
        )
        return METHOD
        
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    return COMMENT

async def handle_text_comment(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    context.user_data['comment'] = update.message.text
    return await show_confirmation(update, context)

async def skip_comment(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    await query.answer()
    context.user_data['comment'] = ""
    return await show_confirmation(update, context)

async def show_confirmation(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        if update.message:
            message = update.message
        elif update.callback_query and update.callback_query.message:
            message = update.callback_query.message
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return MAIN_MENU

        confirmation_text = (
            '‚úÖ –ó–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n'
            f'–í–∞–ª—é—Ç–∞: {context.user_data["currency_from"]}\n'
            f'–°—É–º–º–∞: {context.user_data["amount_from"]}\n'
            f'–°–ø–æ—Å–æ–±: {context.user_data["method"]}\n'
        )
        
        if context.user_data.get('comment'):
            confirmation_text += f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data["comment"]}\n\n'
        
        await message.reply_text(
            confirmation_text,
            reply_markup=confirm_buttons()
        )
        return CONFIRM
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_confirmation: {e}")
        return MAIN_MENU

async def confirm_exchange(update: Update, context: CallbackContext) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == 'confirm':
        await query.edit_message_text('‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
        await show_main_menu(update)
        return MAIN_MENU
    elif query.data == 'edit':
        context.user_data.clear()
        await query.edit_message_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:',
            reply_markup=currency_selection()
        )
        return CURRENCY
    elif query.data == 'back':
        await query.edit_message_text(
            "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",
            reply_markup=comment_options()
        )
        return COMMENT

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await show_main_menu(update)
    return MAIN_MENU

async def show_offers(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    try:
        query = update.callback_query
        await query.answer()
        
        offers = [
            {'id': 1, 'rate': 35.5, 'methods': ['bank', 'cash'], 'min': 100, 'max': 1000},
            {'id': 2, 'rate': 35.3, 'methods': ['crypto'], 'min': 50, 'max': 500}
        ]
        
        offer_text = "üè¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏:\n\n"
        for offer in offers:
            offer_text += (
                f"üí∞ –ö—É—Ä—Å: {offer['rate']} THB\n"
                f"üíµ –õ–∏–º–∏—Ç—ã: {offer['min']}-{offer['max']} USDT\n"
                f"üè¶ –ú–µ—Ç–æ–¥—ã: {', '.join(offer['methods'])}\n"
                f"--------------------------\n"
            )
        
        await query.edit_message_text(
            text=offer_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ])
        )
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        await show_main_menu(update)
        return MAIN_MENU