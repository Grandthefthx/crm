from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CallbackContext
)
import logging
from dotenv import load_dotenv
import os

from core.models import TelegramClient
from asgiref.sync import sync_to_async

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–û –∫–∞–Ω–∞–ª–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data='info'),
            InlineKeyboardButton("–û–±–æ –º–Ω–µ",           callback_data='about'),
        ],
        [
            InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞",          callback_data='sub'),
            InlineKeyboardButton("F.A.Q —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è", callback_data='supp'),
        ],
    ])

def flow_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÆ –í –ø–æ—Ç–æ–∫", url="https://t.me/soul_evolucion")]
    ])

def read_greeting_text() -> str:
    base_dir = os.path.dirname(__file__)
    path = os.path.join(base_dir, 'greeting.txt')
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ greeting.txt: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."

@sync_to_async
def save_telegram_user(user):
    TelegramClient.objects.get_or_create(
        user_id=user.id,
        defaults={
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'bot_source': 'public',
        }
    )

async def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    await save_telegram_user(user)

    text = update.message.text or ""
    args = text.split()
    param = args[1] if len(args) > 1 else None

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–í –ø–æ—Ç–æ–∫" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ —Å ?start=flow
    if param == "flow" and not context.chat_data.get('flow_started'):
        context.chat_data['flow_started'] = True
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ—Ç–æ–∫ ‚ú®\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª.",
            reply_markup=flow_keyboard()
        )
        return

    if not context.chat_data.get('greeting_sent'):
        text = read_greeting_text()
        await update.message.reply_text(
            text,
            reply_markup=main_menu()
        )
        context.chat_data['greeting_sent'] = True

async def handle_main_menu(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'info':
        text = "üì¢ –û –∫–∞–Ω–∞–ª–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ: –ó–¥–µ—Å—å –º—ã –ø—É–±–ª–∏–∫—É–µ–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!"
    elif query.data == 'about':
        text = "üë§ –û–±–æ –º–Ω–µ: –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
    elif query.data == 'sub':
        text = "üîî –ü–æ–¥–ø–∏—Å–∫–∞: –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏!"
    elif query.data == 'supp':
        text = "‚ùì F.A.Q: –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    else:
        return await query.edit_message_reply_markup(reply_markup=main_menu())

    await query.edit_message_text(text)

async def handle_text(update: Update, context: CallbackContext) -> None:
    txt = update.message.text.strip().lower()
    if txt in ('–º–µ–Ω—é', 'menu', 'üìã menu'):
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:",
            reply_markup=main_menu()
        )
    else:
        await update.message.reply_text(
            "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:\n–Ω–∞–ø–∏—à–∏—Ç–µ ¬´–º–µ–Ω—é¬ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.",
            reply_markup=main_menu()
        )

async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    if hasattr(update, 'effective_message') and update.effective_message:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

def main() -> None:
    application = Application.builder().token(
        os.getenv('TELEGRAM_BOT_TOKEN')
    ).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(handle_main_menu))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
    )
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
