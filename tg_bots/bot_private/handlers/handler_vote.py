from telegram import Update, InputFile
from telegram.ext import ContextTypes
from asgiref.sync import sync_to_async
import logging
import os

from core.models import TelegramClient, BroadcastMessage, BroadcastVote, BroadcastAudio

logger = logging.getLogger(__name__)

@sync_to_async
def get_vote_info(user_id, vote_key):
    parts = vote_key.split(":")
    if len(parts) != 3 or parts[0] != "vote":
        return None, None, None, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback."

    try:
        choice = int(parts[1])
        broadcast_id = int(parts[2])
    except ValueError:
        return None, None, None, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞."

    client = TelegramClient.objects.filter(user_id=user_id).first()
    if not client:
        return None, None, None, "‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

    broadcast = BroadcastMessage.objects.filter(id=broadcast_id).first()
    if not broadcast:
        return None, None, None, "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    already = BroadcastVote.objects.filter(message=broadcast, client=client).exists()
    if already:
        return None, None, None, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Å–ª–∞–Ω–∏–µ üôÖ"

    audio = BroadcastAudio.objects.filter(message=broadcast, choice_number=choice).first()
    return client, broadcast, audio, None

@sync_to_async
def save_vote(client, broadcast, choice, audio):
    BroadcastVote.objects.create(
        client=client,
        message=broadcast,
        choice_number=choice,
        voice_file=audio.file if audio else None
    )

async def handle_vote_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    vote_key = query.data
    logger.info(f"[VOTE DEBUG] callback_data={vote_key}, user_id={user_id}")

    client, broadcast, audio, error = await get_vote_info(user_id, vote_key)

    if error:
        logger.warning(f"–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç user {user_id}: {error}")
        try:
            await query.delete_message()
        except Exception:
            pass
        await context.bot.send_message(chat_id=query.message.chat_id, text=error)
        return

    await save_vote(client, broadcast, int(vote_key.split(":")[1]), audio)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await query.delete_message()
    except Exception:
        pass

    mp3_path = None
    if audio and audio.mp3_file and audio.mp3_file.name:
        try:
            mp3_path = audio.mp3_file.path
        except ValueError:
            mp3_path = None
    if audio and audio.mp3_file:
        # >>> –ì–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ –∑–¥–µ—Å—å <<<
        # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ –∏–º—è, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ custom_filename (–¥–∞–∂–µ –±–µ–∑ .mp3), –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.
        if audio.custom_filename:
            filename = audio.custom_filename
        elif mp3_path:
            filename = os.path.basename(mp3_path)
        else:
            filename = None
        exists_flag = os.path.exists(mp3_path) if mp3_path else False
        logger.info(f"üìé –û—Ç–ø—Ä–∞–≤–∫–∞ mp3-–∞—É–¥–∏–æ: {mp3_path}, exists={exists_flag}, filename={filename}")
        if mp3_path and os.path.exists(mp3_path):
            with open(mp3_path, "rb") as f:
                await context.bot.send_audio(
                    chat_id=query.message.chat_id,
                    audio=InputFile(f, filename=filename),
                    caption=audio.caption or "‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω. –°–ø–∞—Å–∏–±–æ!",
                    parse_mode="HTML"
                )
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ö†Ô∏è mp3-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await context.bot.send_message(chat_id=query.message.chat_id, text="‚úÖ –ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç, –Ω–æ –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
